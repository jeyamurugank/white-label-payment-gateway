import crypto from 'crypto';import { Injectable } from '@nestjs/common';import { ProviderFactory } from '../providers/provider.factory';import { PrismaService } from '../db/prisma.service';@Injectable()export class PaymentsService{constructor(private factory:ProviderFactory,private prisma:PrismaService){}async createPayment(body){const providerName=body.provider||body.metadata?.provider||'razorpay';const provider=this.factory.get(providerName);const orderId=body.orderId||crypto.randomUUID();const res=await provider.createPayment({amount:body.amount,currency:body.currency||'INR',orderId,customer:body.customer||{}});await this.prisma.transaction.create({data:{merchantId:body.merchantId||undefined,providerId:undefined,providerTxId:res.id,amount:body.amount,currency:body.currency||'INR',status:res.status,metadata:res.data}});return res;}async capture(provider,paymentId,amount){const svc=this.factory.get(provider);const res=await svc.capturePayment(paymentId,amount);await this.prisma.transaction.updateMany({where:{providerTxId:paymentId},data:{status:res.status,metadata:res.data}});return res;}}