import crypto from 'crypto';import { Injectable } from '@nestjs/common';import { HttpClient } from '../../../common/http.client';import { VaultService } from '../../../common/vault.service';import { retry } from '../../../common/retry';import { IPaymentProvider } from '../types/ipayment-provider';function timingEqualSafe(a,b){try{const A=Buffer.from(a);const B=Buffer.from(b);if(A.length!==B.length)return false;return crypto.timingSafeEqual(A,B);}catch{return false;}}@Injectable()export class RazorpayProvider implements IPaymentProvider{constructor(private http:HttpClient,private vault:VaultService){}name(){return 'razorpay';}private async creds(){const key_id=await this.vault.get('providers/razorpay','key_id')||process.env.RZP_KEY_ID;const key_secret=await this.vault.get('providers/razorpay','key_secret')||process.env.RZP_KEY_SECRET;if(!key_id||!key_secret)throw new Error('Razorpay credentials missing');return{key_id,key_secret};}async createPayment(input){const{key_id,key_secret}=await this.creds();const basic=Buffer.from(`${key_id}:${key_secret}`).toString('base64');const body={amount:Math.round(input.amount*100),currency:input.currency,receipt:input.orderId,payment_capture:1};const call=async()=>{const data=await this.http.request('https://api.razorpay.com/v1/orders',{method:'POST',headers:{Authorization:`Basic ${basic}`,'Content-Type':'application/json','Idempotency-Key':input.orderId},body:JSON.stringify(body)});return data;};const data=await retry(call,4,500);return{id:data.id,status:'created',data};}async capturePayment(pid,amount){const{key_id,key_secret}=await this.creds();const basic=Buffer.from(`${key_id}:${key_secret}`).toString('base64');const call=async()=>{const data=await this.http.request(`https://api.razorpay.com/v1/payments/${pid}/capture`,{method:'POST',headers:{Authorization:`Basic ${basic}`,'Content-Type':'application/json'},body:JSON.stringify({amount:Math.round(amount*100),currency:'INR'})});return data;};const data=await retry(call,3,500);return{id:data.id,status:data.status,data};}async verifyWebhook({headers,body}){const signature=(headers['x-razorpay-signature']||headers['x-razorpay-signature'.toLowerCase()]||'');const secret=process.env.WEBHOOK_SECRET_RZP||'';if(!signature||!secret)return{ok:false,data:body};const payload=JSON.stringify(body);const computed=crypto.createHmac('sha256',secret).update(payload).digest('hex');const ok=timingEqualSafe(signature,computed);return{ok,providerPaymentId:body?.payload?.payment?.entity?.id,orderId:body?.payload?.payment?.entity?.order_id,status:body?.event,data:body};}}