import { NestMiddleware, Injectable, TooManyRequestsException } from '@nestjs/common'; type Bucket={ tokens:number; last:number }; const MAP=new Map<string,Bucket>(); @Injectable()export class RateLimiterMiddleware implements NestMiddleware{constructor(private opts={ capacity:100, refillPerSec:1 }){} use(req:any,res:any,next:any){const key=req.headers['x-api-key']||req.ip||'anon';const now=Date.now();let b=MAP.get(key); if(!b){ b={ tokens:this.opts.capacity, last:now}; MAP.set(key,b);} const elapsed=(now-b.last)/1000; b.tokens=Math.min(this.opts.capacity, b.tokens + elapsed * this.opts.refillPerSec); b.last=now; if(b.tokens<1) throw new TooManyRequestsException('rate limit exceeded'); b.tokens-=1; next(); }}